import &ArtStandardLib
{missing} = &ArtCommunicationStatus
{ElasticsearchPipeline} = &ArtEryElasticsearch
{pipelines} = &ArtEry

suite: ->
  @timeout 10000

  userSearch = postSearch = feedSearch = null

  setup ->
    &ArtEry._reset()

    class UserSearch extends ElasticsearchPipeline
      @mapping
        properties:
          email: type: :keyword
          name:  type: :text
          about: type: :text      analyzer: :english

    class FeedSearch extends ElasticsearchPipeline
      @parentField  :userId

      @mapping
        _parent:  type: :user_search
        properties:
          userId: type: :keyword
          title:  type: :text     analyzer: :english

    class PostSearch extends ElasticsearchPipeline
      @routingField :userId
      @parentField  :feedId

      @mapping
        _parent:  type: :feed_search
        properties:
          userId: type: :keyword
          feedId: type: :keyword
          text:   type: :text     analyzer: :english

    {userSearch, postSearch, feedSearch} = pipelines

    userSearch.indexExists()
    .then (exists) -> userSearch.deleteIndex data: force: true if exists
    .then -> userSearch.initialize()

  test "initializing", ->

  test "post set", ->
    Promise.all []
      postSearch.update
        key: :postAbc
        data:
          userId: :userAbc
          feedId: :feedAbc
          text:   "" The best post ever

      feedSearch.update
        key: :feedAbc
        data:
          userId: :userAbc
          title:  "" The best feed ever

      userSearch.update
        key: :userAbc
        data:
          email:  :shanebdavis@imikimi.com
          name:   :Shane
          about:  "" I made this!

    .then -> timeout 1000
    .then ->
      postSearch.elasticsearch data:
        query:
          has_parent:
            parent_type: :feed_search
            query:
              has_parent:
                parent_type:  :user_search
                query: match: about: "made"

    .then (result) ->
      assert.eq result.hits.total, 1
      assert.eq result.hits.hits[0]._id, :postAbc
